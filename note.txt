import math


def fact(n):
	res = 1
	for i in range(2,n+1):
		res *= i
	return res

def ncr(n, r):
	return fact(n)/(fact(n-r)*fact(r))

bn = []
bn.append(1.0)

for i in range(0,50):
	sum = 0.0
	for k in range(len(bn)):
		sum += bn[k]*ncr(len(bn)+1, k)
	b = (0-sum)/(len(bn)+1)
	if abs(b) < 1.0e-08:
		b = 0
	bn.append(b)

for i in range(0, len(bn), 2):
	print (bn[i])

---------------
-----------------------------------

 n^x = (1 + xlogn/k)^k
 = 1 + (k,1) (xlogn/k) + (k,2) (xlogn/k)^2 + (k,3) (xlogn/k)^3 + ... + (xlogn/k)^k

 sum (n:2->c) ((logn)^k) = c ( (logc)^k - k(logc)^k-1 + k(k-1)(logc)^k-2 + ... + k!)

 sum (n:2->c) (n^x) = 

 c (1 + (k,m) (x/k)^k * ( (logc)^k - k(logc)^k-1 + k(k-1)(logc)^k-2  ) )

 c (1 + (k,m) (x/k)^k * (logc)^k (1 - k(logc)^-1 ) )

 c (1 + axlogc/k)^k   ;   (1 - k(logc)^-1) = a^k

 a^k = (1 - k(logc)^-1)
 
 a = (1 - k(logc)^-1)^(1/k)
 
--------------------------------
 
 c (1 + axlogc/k)^k = -1
 
 (1 + axlogc/k)^k = -1/c

 axlogc/k = (-1/c)^(1/k)
 
---------------

import math

logc = 4000

# logc is the log of the number of terms (c) in the zeta function sum.
# n is the rising integer base for n^x or n^-x in the sum.
# n = 2 to c (excluding the first term of 1)
# n^x is written as e^(xlogn) and approximated as (1 + xlogn/k)^k. 
# k is the finite exponent of e approximation. 
# k is also the number of zeros (or minus ones).
# m is the rising exponent of (xlogn/k) in the binomial expansion of (1 + xlogn/k)^k. 
# m = 1 to k (excluding the first term of 1)

def logsum():
	for m in range (3, 5000, 200):
		sum = 0.0
		v = 1
		sum = 1
		for i in range (m):
			v *= (m-i) / logc
			a = (-1)**(i+1) * v
			sum += a
#		print (sum + math.sqrt(math.log(m)))
		s = (1 - (1/math.e) * math.log (1+ 2.9*m/logc) )
		print (1 + sum, ',', 1 + s)

logsum()

# 1/2 logc + c (logc)^n (2 - 1/e log (1+3n/logc) )

# s = 0.5*gc + c * (gc**n) *(2 - (1/e) * math.log (1+ 3*n/gc) )

# sum = 3 - math.sqrt(math.log(m))
	
	
# x((logx)^1 - 1)
# x((logx)^2 - 2*(logx) + 2*1)
# x((logx)^3 - 3*(logx)^2 + 3*2*(logx) - 3*2*1)
# x((logx)^4 - 4*(logx)^3 + 4*3*(logx)^2 - 4*3*2*(logx) + 4*3*2*1)

# x(logx)^4 ( 1 - 4/(logx) + 4*3/(logx)^2 - 4*3*2/(logx)^3 + 4*3*2*1/(logx)^4)
# x(logx)^3 ( 1 - 3/(logx) + 3*2/(logx)^2 - 3*2*1/(logx)^3)
# x(logx)^2 ( 1 - 2/(logx) + 2*1/(logx)^2)
# x(logx)^1 ( 1 - 1/(logx))


------------
http://go.helms-net.de/math/binomial/zeta_bernoulli.pdf

  
 x = (-1/c)^(1/k) * k/(alogc)

 x = (-1/c)^(1/k) * k/ (logc * (1 - k(logc)^-1)^(1/k) )

 x = (k/logc) * (-1/c)^(1/k) * (1 - k(logc)^-1)^(1/k) 

 x = (k/logc) * (-1/c)^(1/k) * (1 - k/(logc))^(1/k) 

 x = (k/logc) * ( (-1/c) * (1 - k/(logc)) )^(1/k) 

--------------------------------



I just want to throw some light on suitablity of ECS for Nexus components. 

Architecture-wise Nexus solution is not quite designed for ECS hosting. The current Nexus architecture does not identiify ECS as the hosting environment for major Nexus components such as Corda App, Signer Service which all run outside of ECS. MQ brokers and Databases which are also major dependency services also run outside of ECS.

Nexus is primarily a consumer process for MQ queues, but not much of REST API anymore. Nexus POC (2017-18) was designed to be a set of microservices with REST APIs which made it a suitable for ECS deployemnet with an APIM Gateway fronting and token-based authentication etc.

However the phase-2 design of Nexus has changed drastically, by shifting from being a REST API to an MQ consumer. As such, Nexus requests are currently authenticated by MQ broker, but not by APIM tokens.

My point is, the ECS Team might have selected our projects just because they saw these as being dev projects in ECS. However I suggest to hold off this migration until we validate our solution design with potential users (apps) after which the architecture can be updated with suitable deployemnt target details etc.




 
